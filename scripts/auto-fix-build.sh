#!/bin/bash

# ===================================================
# Automated Build Fixer with Cursor AI
# ===================================================
# This script automatically fetches failed build logs
# and creates a commit message that Cursor can process
# ===================================================

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🤖 Automated Build Fixer${NC}"
echo "=================================================="
echo ""

# Check prerequisites
if ! command -v gh &> /dev/null; then
    echo -e "${RED}❌ GitHub CLI (gh) not installed${NC}"
    exit 1
fi

if ! gh auth status &> /dev/null; then
    echo -e "${RED}❌ Not authenticated with GitHub${NC}"
    exit 1
fi

# Get latest failed run
echo -e "${YELLOW}🔍 Looking for failed builds...${NC}"
FAILED_RUN=$(gh run list --status failure --limit 1 --json databaseId,name,workflowName --jq '.[0]')

if [ -z "$FAILED_RUN" ] || [ "$FAILED_RUN" == "null" ]; then
    echo -e "${GREEN}✅ No failed builds found!${NC}"
    exit 0
fi

RUN_ID=$(echo $FAILED_RUN | jq -r '.databaseId')
RUN_NAME=$(echo $FAILED_RUN | jq -r '.name')
RUN_WORKFLOW=$(echo $FAILED_RUN | jq -r '.workflowName')

echo -e "${RED}❌ Found failed build: #${RUN_ID}${NC}"
echo "   Workflow: $RUN_WORKFLOW"
echo "   Name: $RUN_NAME"
echo ""

# Fetch logs
echo -e "${YELLOW}📥 Fetching error logs...${NC}"
TEMP_LOG=$(mktemp)
gh run view $RUN_ID --log-failed > "$TEMP_LOG" 2>&1

# Extract key error
ERROR_SUMMARY=$(cat "$TEMP_LOG" | grep -i "error" | head -n 5 || echo "Build failed")

echo -e "${GREEN}✅ Logs fetched${NC}"
echo ""

# Create a detailed fix request file
FIX_REQUEST_FILE=".github-build-fix-request.md"

cat > "$FIX_REQUEST_FILE" << EOF
# 🔧 AUTO-FIX REQUEST: GitHub Actions Build Failure

## Detected Failure
**Run ID:** $RUN_ID
**Workflow:** $RUN_WORKFLOW
**Status:** FAILED ❌

## Error Summary
\`\`\`
$ERROR_SUMMARY
\`\`\`

## Full Error Log
\`\`\`
$(cat "$TEMP_LOG" | head -n 100)
\`\`\`

## Action Required
Cursor AI: Please analyze the logs above and fix the build errors automatically.

Priority fixes:
1. Check Dockerfile paths and COPY commands
2. Verify package.json dependencies
3. Fix any syntax errors
4. Ensure build context is correct

## Context Files to Check
- \`icfix/Dockerfile\`
- \`icfix/package.json\`
- \`.github/workflows/docker-build.yml\`
- \`.github/workflows/deploy-backend.yml\`

---
Auto-generated by auto-fix-build.sh
EOF

echo -e "${GREEN}✅ Fix request generated: $FIX_REQUEST_FILE${NC}"
echo ""

# Show preview
echo "=================================================="
echo -e "${BLUE}📋 FIX REQUEST PREVIEW${NC}"
echo "=================================================="
head -n 30 "$FIX_REQUEST_FILE"
echo "..."
echo "=================================================="
echo ""

# Options for automation
echo -e "${YELLOW}🎯 Next Steps:${NC}"
echo ""
echo "1. MANUAL: Open Cursor and paste the content of:"
echo "   $FIX_REQUEST_FILE"
echo ""
echo "2. AUTO-OPEN: If you have Cursor CLI installed:"
echo "   cursor $FIX_REQUEST_FILE"
echo ""
echo "3. Use this in Cursor chat:"
echo "   'Read .github-build-fix-request.md and fix all issues'"
echo ""

# Try to auto-open in Cursor
if command -v cursor &> /dev/null; then
    echo -e "${YELLOW}🚀 Auto-opening in Cursor...${NC}"
    cursor "$FIX_REQUEST_FILE"
    echo -e "${GREEN}✅ Opened in Cursor!${NC}"
    echo ""
    echo "In Cursor, type:"
    echo "  'Read .github-build-fix-request.md and fix all the build errors'"
elif command -v code &> /dev/null; then
    echo -e "${YELLOW}🚀 Opening in VS Code...${NC}"
    code "$FIX_REQUEST_FILE"
else
    echo -e "${YELLOW}💡 Install Cursor CLI for automatic opening${NC}"
fi

# Cleanup
rm -f "$TEMP_LOG"

echo ""
echo "=================================================="
echo -e "${GREEN}✅ Ready for fixing!${NC}"
echo "=================================================="

