# ===========================================
# Medusa Backend Environment Variables
# ===========================================
# Copy this file to .env and fill in the values
# DO NOT commit .env to version control
# ===========================================

# ===========================================
# Node Environment
# ===========================================
NODE_ENV=production

# ===========================================
# PostgreSQL Database Configuration
# ===========================================
POSTGRES_DB=icfix_db
POSTGRES_USER=icfix_user
POSTGRES_PASSWORD=your_secure_postgres_password_here

# Full database URL (used by Medusa)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL=postgresql://icfix_user:your_secure_postgres_password_here@postgres:5432/icfix_db

# ===========================================
# Redis Configuration
# ===========================================
REDIS_URL=redis://redis:6379

# ===========================================
# MeiliSearch Configuration
# ===========================================
# Master key for MeiliSearch (must be at least 16 characters)
MEILISEARCH_API_KEY=your_meilisearch_master_key_here

# MeiliSearch environment (development or production)
MEILISEARCH_ENV=production

# ===========================================
# Medusa Security Configuration
# ===========================================
# JWT Secret (generate a random string, at least 32 characters)
JWT_SECRET=your_jwt_secret_key_here

# Cookie Secret (generate a random string, at least 32 characters)
COOKIE_SECRET=your_cookie_secret_key_here

# ===========================================
# CORS Configuration
# ===========================================
# Store CORS (comma-separated list of allowed origins)
STORE_CORS=http://localhost:8000,https://yourdomain.com

# Admin CORS (comma-separated list of allowed origins)
ADMIN_CORS=http://localhost:7001,http://localhost:9000,https://admin.yourdomain.com

# Auth CORS (comma-separated list of allowed origins)
AUTH_CORS=http://localhost:7001,http://localhost:9000,https://admin.yourdomain.com

# ===========================================
# Cloudflare R2 / S3-Compatible Storage (Optional)
# ===========================================
# R2 Endpoint URL
R2_ENDPOINT=https://your-account-id.r2.cloudflarestorage.com

# R2 Region (usually 'auto' for Cloudflare R2)
R2_REGION=auto

# R2 Bucket name
R2_BUCKET=your-bucket-name

# R2 Access credentials
R2_ACCESS_KEY_ID=your_r2_access_key_id
R2_SECRET_ACCESS_KEY=your_r2_secret_access_key

# Public URL for accessing files
R2_FILE_URL=https://your-custom-domain.com

# Optional prefix for file paths in the bucket
R2_PREFIX=

# ===========================================
# Gmail OAuth2 Email Notifications
# ===========================================
# Gmail address to send emails from
GMAIL_USER=your-email@gmail.com

# Google OAuth2 Client ID
# Get from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com

# Google OAuth2 Client Secret
GOOGLE_CLIENT_SECRET=your-client-secret

# Google OAuth2 Refresh Token
# Use OAuth2 Playground to generate: https://developers.google.com/oauthplayground
GOOGLE_REFRESH_TOKEN=your-refresh-token

# Store name for email templates
STORE_NAME=Your Store Name

# ===========================================
# Webhook Configuration (for Storefront)
# ===========================================
# Admin API Key (create in Admin UI after setup)
ADMIN_API_KEY=sk_xxxxxxxxxxxxx

# Storefront revalidation endpoint
WEBHOOK_TARGET_BASE=https://yourdomain.com/api/revalidate

# Revalidation secret (must match storefront)
REVALIDATE_SECRET=your_revalidate_secret_here

# Webhook HTTP method
WEBHOOK_HTTP_METHOD=POST

# Webhook name prefix
WEBHOOK_NAME_PREFIX=vercel-revalidate

# ===========================================
# How to Generate Secure Secrets
# ===========================================
# Run these commands to generate random secrets:
#
# JWT_SECRET:
#   openssl rand -base64 32
#
# COOKIE_SECRET:
#   openssl rand -base64 32
#
# POSTGRES_PASSWORD:
#   openssl rand -base64 24
#
# MEILISEARCH_API_KEY:
#   openssl rand -base64 24
#
# REVALIDATE_SECRET:
#   openssl rand -base64 32

# ===========================================
# Gmail OAuth2 Setup Guide
# ===========================================
# 
# 1. Go to Google Cloud Console: https://console.cloud.google.com/
# 
# 2. Create a new project or select existing
# 
# 3. Enable Gmail API:
#    - APIs & Services → Enable APIs and Services
#    - Search for "Gmail API" → Enable
# 
# 4. Create OAuth 2.0 Credentials:
#    - APIs & Services → Credentials
#    - Create Credentials → OAuth 2.0 Client ID
#    - Application type: Web application
#    - Authorized redirect URIs: https://developers.google.com/oauthplayground
#    - Copy Client ID and Client Secret
# 
# 5. Get Refresh Token:
#    - Go to: https://developers.google.com/oauthplayground
#    - Click settings (gear icon) → Use your own OAuth credentials
#    - Enter your Client ID and Client Secret
#    - In Step 1: Select Gmail API v1 → https://mail.google.com
#    - Click "Authorize APIs"
#    - In Step 2: Click "Exchange authorization code for tokens"
#    - Copy the Refresh Token
# 
# 6. Add credentials to .env file above
# 
# For detailed instructions, see:
# ./icfix/plugins/notification-gmail-oauth2/README.md
# ===========================================

