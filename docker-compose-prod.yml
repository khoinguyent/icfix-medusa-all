version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medusa}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-medusa}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  meilisearch:
    image: getmeili/meilisearch:v1.5
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_API_KEY:-masterKey}
      MEILI_ENV: ${MEILISEARCH_ENV:-production}
      MEILI_NO_ANALYTICS: "true"
    ports:
      - "${MEILISEARCH_PORT:-7700}:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7700/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  medusa:
    image: ghcr.io/${GITHUB_REPOSITORY:-your-username/your-repo}:latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-medusa}
      REDIS_URL: redis://redis:6379
      
      # MeiliSearch configuration
      MEILISEARCH_HOST: http://meilisearch:7700
      MEILISEARCH_API_KEY: ${MEILISEARCH_API_KEY:-masterKey}
      
      # JWT and CORS configuration
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}
      STORE_CORS: ${STORE_CORS:-http://localhost:8000}
      ADMIN_CORS: ${ADMIN_CORS:-http://localhost:7001}
      AUTH_CORS: ${AUTH_CORS:-http://localhost:9000}
      
      # File storage (R2) - optional
      R2_ENDPOINT: ${R2_ENDPOINT}
      R2_REGION: ${R2_REGION:-auto}
      R2_BUCKET: ${R2_BUCKET}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_FILE_URL: ${R2_FILE_URL}
      R2_PREFIX: ${R2_PREFIX:-}
      
      # Node environment
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${MEDUSA_PORT:-9000}:9000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pgdata:
  redis_data:
  meilisearch_data: